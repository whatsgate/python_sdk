# coding: utf-8

"""
    API whatsgate.ru

    Интерфейс для взаимодействия с клиентом Whatsapp  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseChat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'is_group': 'bool',
        'is_read_only': 'bool',
        'unread_count': 'int',
        'timestamp': 'int',
        'pinned': 'bool',
        'is_muted': 'bool',
        'mute_expiration': 'bool',
        'group_metadata': 'ResponseChatGroupMetadata'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'is_group': 'isGroup',
        'is_read_only': 'isReadOnly',
        'unread_count': 'unreadCount',
        'timestamp': 'timestamp',
        'pinned': 'pinned',
        'is_muted': 'isMuted',
        'mute_expiration': 'muteExpiration',
        'group_metadata': 'groupMetadata'
    }

    def __init__(self, id=None, name=None, is_group=None, is_read_only=None, unread_count=None, timestamp=None, pinned=None, is_muted=None, mute_expiration=None, group_metadata=None):  # noqa: E501
        """ResponseChat - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._is_group = None
        self._is_read_only = None
        self._unread_count = None
        self._timestamp = None
        self._pinned = None
        self._is_muted = None
        self._mute_expiration = None
        self._group_metadata = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if is_group is not None:
            self.is_group = is_group
        if is_read_only is not None:
            self.is_read_only = is_read_only
        if unread_count is not None:
            self.unread_count = unread_count
        if timestamp is not None:
            self.timestamp = timestamp
        if pinned is not None:
            self.pinned = pinned
        if is_muted is not None:
            self.is_muted = is_muted
        if mute_expiration is not None:
            self.mute_expiration = mute_expiration
        if group_metadata is not None:
            self.group_metadata = group_metadata

    @property
    def id(self):
        """Gets the id of this ResponseChat.  # noqa: E501

        Идентификатор контакта или группы в формате WhatsApp  # noqa: E501

        :return: The id of this ResponseChat.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseChat.

        Идентификатор контакта или группы в формате WhatsApp  # noqa: E501

        :param id: The id of this ResponseChat.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ResponseChat.  # noqa: E501

        Имя контакта или группы  # noqa: E501

        :return: The name of this ResponseChat.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseChat.

        Имя контакта или группы  # noqa: E501

        :param name: The name of this ResponseChat.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_group(self):
        """Gets the is_group of this ResponseChat.  # noqa: E501

        Является ли чат контактом или группой  # noqa: E501

        :return: The is_group of this ResponseChat.  # noqa: E501
        :rtype: bool
        """
        return self._is_group

    @is_group.setter
    def is_group(self, is_group):
        """Sets the is_group of this ResponseChat.

        Является ли чат контактом или группой  # noqa: E501

        :param is_group: The is_group of this ResponseChat.  # noqa: E501
        :type: bool
        """

        self._is_group = is_group

    @property
    def is_read_only(self):
        """Gets the is_read_only of this ResponseChat.  # noqa: E501

        Является ли чат ReadOnly  # noqa: E501

        :return: The is_read_only of this ResponseChat.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this ResponseChat.

        Является ли чат ReadOnly  # noqa: E501

        :param is_read_only: The is_read_only of this ResponseChat.  # noqa: E501
        :type: bool
        """

        self._is_read_only = is_read_only

    @property
    def unread_count(self):
        """Gets the unread_count of this ResponseChat.  # noqa: E501

        Количество непрочитанных сообщений в чате  # noqa: E501

        :return: The unread_count of this ResponseChat.  # noqa: E501
        :rtype: int
        """
        return self._unread_count

    @unread_count.setter
    def unread_count(self, unread_count):
        """Sets the unread_count of this ResponseChat.

        Количество непрочитанных сообщений в чате  # noqa: E501

        :param unread_count: The unread_count of this ResponseChat.  # noqa: E501
        :type: int
        """

        self._unread_count = unread_count

    @property
    def timestamp(self):
        """Gets the timestamp of this ResponseChat.  # noqa: E501

        Время последней активночти в чате  # noqa: E501

        :return: The timestamp of this ResponseChat.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ResponseChat.

        Время последней активночти в чате  # noqa: E501

        :param timestamp: The timestamp of this ResponseChat.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def pinned(self):
        """Gets the pinned of this ResponseChat.  # noqa: E501

        Является ли чат закрепленным  # noqa: E501

        :return: The pinned of this ResponseChat.  # noqa: E501
        :rtype: bool
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this ResponseChat.

        Является ли чат закрепленным  # noqa: E501

        :param pinned: The pinned of this ResponseChat.  # noqa: E501
        :type: bool
        """

        self._pinned = pinned

    @property
    def is_muted(self):
        """Gets the is_muted of this ResponseChat.  # noqa: E501

        Выключен ли у чата звук  # noqa: E501

        :return: The is_muted of this ResponseChat.  # noqa: E501
        :rtype: bool
        """
        return self._is_muted

    @is_muted.setter
    def is_muted(self, is_muted):
        """Sets the is_muted of this ResponseChat.

        Выключен ли у чата звук  # noqa: E501

        :param is_muted: The is_muted of this ResponseChat.  # noqa: E501
        :type: bool
        """

        self._is_muted = is_muted

    @property
    def mute_expiration(self):
        """Gets the mute_expiration of this ResponseChat.  # noqa: E501

        Время, оставшееся до включения звука  # noqa: E501

        :return: The mute_expiration of this ResponseChat.  # noqa: E501
        :rtype: bool
        """
        return self._mute_expiration

    @mute_expiration.setter
    def mute_expiration(self, mute_expiration):
        """Sets the mute_expiration of this ResponseChat.

        Время, оставшееся до включения звука  # noqa: E501

        :param mute_expiration: The mute_expiration of this ResponseChat.  # noqa: E501
        :type: bool
        """

        self._mute_expiration = mute_expiration

    @property
    def group_metadata(self):
        """Gets the group_metadata of this ResponseChat.  # noqa: E501


        :return: The group_metadata of this ResponseChat.  # noqa: E501
        :rtype: ResponseChatGroupMetadata
        """
        return self._group_metadata

    @group_metadata.setter
    def group_metadata(self, group_metadata):
        """Sets the group_metadata of this ResponseChat.


        :param group_metadata: The group_metadata of this ResponseChat.  # noqa: E501
        :type: ResponseChatGroupMetadata
        """

        self._group_metadata = group_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseChat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseChat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
