# coding: utf-8

"""
    API whatsgate.ru

    Интерфейс для взаимодействия с клиентом Whatsapp  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'ack': 'int',
        'has_media': 'bool',
        'media_key': 'str',
        'body': 'str',
        'type': 'str',
        'timestamp': 'int',
        '_from': 'str',
        'to': 'str',
        'is_forwarded': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'ack': 'ack',
        'has_media': 'hasMedia',
        'media_key': 'mediaKey',
        'body': 'body',
        'type': 'type',
        'timestamp': 'timestamp',
        '_from': 'from',
        'to': 'to',
        'is_forwarded': 'isForwarded'
    }

    def __init__(self, id=None, ack=None, has_media=None, media_key=None, body=None, type=None, timestamp=None, _from=None, to=None, is_forwarded=None):  # noqa: E501
        """ResponseMessage - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._ack = None
        self._has_media = None
        self._media_key = None
        self._body = None
        self._type = None
        self._timestamp = None
        self.__from = None
        self._to = None
        self._is_forwarded = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if ack is not None:
            self.ack = ack
        if has_media is not None:
            self.has_media = has_media
        if media_key is not None:
            self.media_key = media_key
        if body is not None:
            self.body = body
        if type is not None:
            self.type = type
        if timestamp is not None:
            self.timestamp = timestamp
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if is_forwarded is not None:
            self.is_forwarded = is_forwarded

    @property
    def id(self):
        """Gets the id of this ResponseMessage.  # noqa: E501

        Идентификатор сообщения  # noqa: E501

        :return: The id of this ResponseMessage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseMessage.

        Идентификатор сообщения  # noqa: E501

        :param id: The id of this ResponseMessage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ack(self):
        """Gets the ack of this ResponseMessage.  # noqa: E501

        Флаг просмотра сообщения  # noqa: E501

        :return: The ack of this ResponseMessage.  # noqa: E501
        :rtype: int
        """
        return self._ack

    @ack.setter
    def ack(self, ack):
        """Sets the ack of this ResponseMessage.

        Флаг просмотра сообщения  # noqa: E501

        :param ack: The ack of this ResponseMessage.  # noqa: E501
        :type: int
        """

        self._ack = ack

    @property
    def has_media(self):
        """Gets the has_media of this ResponseMessage.  # noqa: E501

        Флаг, имеет ли сообщение медиафайл  # noqa: E501

        :return: The has_media of this ResponseMessage.  # noqa: E501
        :rtype: bool
        """
        return self._has_media

    @has_media.setter
    def has_media(self, has_media):
        """Sets the has_media of this ResponseMessage.

        Флаг, имеет ли сообщение медиафайл  # noqa: E501

        :param has_media: The has_media of this ResponseMessage.  # noqa: E501
        :type: bool
        """

        self._has_media = has_media

    @property
    def media_key(self):
        """Gets the media_key of this ResponseMessage.  # noqa: E501

        Ключ медиафайла (при наличии)  # noqa: E501

        :return: The media_key of this ResponseMessage.  # noqa: E501
        :rtype: str
        """
        return self._media_key

    @media_key.setter
    def media_key(self, media_key):
        """Sets the media_key of this ResponseMessage.

        Ключ медиафайла (при наличии)  # noqa: E501

        :param media_key: The media_key of this ResponseMessage.  # noqa: E501
        :type: str
        """

        self._media_key = media_key

    @property
    def body(self):
        """Gets the body of this ResponseMessage.  # noqa: E501

        Текст сообщения  # noqa: E501

        :return: The body of this ResponseMessage.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ResponseMessage.

        Текст сообщения  # noqa: E501

        :param body: The body of this ResponseMessage.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def type(self):
        """Gets the type of this ResponseMessage.  # noqa: E501

        Тип сообщения  # noqa: E501

        :return: The type of this ResponseMessage.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseMessage.

        Тип сообщения  # noqa: E501

        :param type: The type of this ResponseMessage.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def timestamp(self):
        """Gets the timestamp of this ResponseMessage.  # noqa: E501

        Время сообщения в формате Unix Timestamp  # noqa: E501

        :return: The timestamp of this ResponseMessage.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ResponseMessage.

        Время сообщения в формате Unix Timestamp  # noqa: E501

        :param timestamp: The timestamp of this ResponseMessage.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def _from(self):
        """Gets the _from of this ResponseMessage.  # noqa: E501

        Идентификатор отправителя в формате WhatsApp  # noqa: E501

        :return: The _from of this ResponseMessage.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ResponseMessage.

        Идентификатор отправителя в формате WhatsApp  # noqa: E501

        :param _from: The _from of this ResponseMessage.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this ResponseMessage.  # noqa: E501

        Идентификатор получателя в формате WhatsApp  # noqa: E501

        :return: The to of this ResponseMessage.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this ResponseMessage.

        Идентификатор получателя в формате WhatsApp  # noqa: E501

        :param to: The to of this ResponseMessage.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def is_forwarded(self):
        """Gets the is_forwarded of this ResponseMessage.  # noqa: E501

        Флаг, было ли сообщение перенаправлено  # noqa: E501

        :return: The is_forwarded of this ResponseMessage.  # noqa: E501
        :rtype: bool
        """
        return self._is_forwarded

    @is_forwarded.setter
    def is_forwarded(self, is_forwarded):
        """Sets the is_forwarded of this ResponseMessage.

        Флаг, было ли сообщение перенаправлено  # noqa: E501

        :param is_forwarded: The is_forwarded of this ResponseMessage.  # noqa: E501
        :type: bool
        """

        self._is_forwarded = is_forwarded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
