# coding: utf-8

"""
    API whatsgate.ru

    Интерфейс для взаимодействия с клиентом Whatsapp  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseChatGroupMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'creation': 'int',
        'owner': 'str',
        'size': 'int',
        'participants': 'list[ResponseChatGroupMetadataParticipants]'
    }

    attribute_map = {
        'id': 'id',
        'creation': 'creation',
        'owner': 'owner',
        'size': 'size',
        'participants': 'participants'
    }

    def __init__(self, id=None, creation=None, owner=None, size=None, participants=None):  # noqa: E501
        """ResponseChatGroupMetadata - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._creation = None
        self._owner = None
        self._size = None
        self._participants = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if creation is not None:
            self.creation = creation
        if owner is not None:
            self.owner = owner
        if size is not None:
            self.size = size
        if participants is not None:
            self.participants = participants

    @property
    def id(self):
        """Gets the id of this ResponseChatGroupMetadata.  # noqa: E501

        Идентификатор группы в формате WhatsApp  # noqa: E501

        :return: The id of this ResponseChatGroupMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseChatGroupMetadata.

        Идентификатор группы в формате WhatsApp  # noqa: E501

        :param id: The id of this ResponseChatGroupMetadata.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def creation(self):
        """Gets the creation of this ResponseChatGroupMetadata.  # noqa: E501

        Дата создания группы в формате Unix Time Stamp  # noqa: E501

        :return: The creation of this ResponseChatGroupMetadata.  # noqa: E501
        :rtype: int
        """
        return self._creation

    @creation.setter
    def creation(self, creation):
        """Sets the creation of this ResponseChatGroupMetadata.

        Дата создания группы в формате Unix Time Stamp  # noqa: E501

        :param creation: The creation of this ResponseChatGroupMetadata.  # noqa: E501
        :type: int
        """

        self._creation = creation

    @property
    def owner(self):
        """Gets the owner of this ResponseChatGroupMetadata.  # noqa: E501

        Идентификатор создателя группы в формате WhatsApp  # noqa: E501

        :return: The owner of this ResponseChatGroupMetadata.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ResponseChatGroupMetadata.

        Идентификатор создателя группы в формате WhatsApp  # noqa: E501

        :param owner: The owner of this ResponseChatGroupMetadata.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def size(self):
        """Gets the size of this ResponseChatGroupMetadata.  # noqa: E501

        Количество участников в группе  # noqa: E501

        :return: The size of this ResponseChatGroupMetadata.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ResponseChatGroupMetadata.

        Количество участников в группе  # noqa: E501

        :param size: The size of this ResponseChatGroupMetadata.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def participants(self):
        """Gets the participants of this ResponseChatGroupMetadata.  # noqa: E501

        Массив участников  # noqa: E501

        :return: The participants of this ResponseChatGroupMetadata.  # noqa: E501
        :rtype: list[ResponseChatGroupMetadataParticipants]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this ResponseChatGroupMetadata.

        Массив участников  # noqa: E501

        :param participants: The participants of this ResponseChatGroupMetadata.  # noqa: E501
        :type: list[ResponseChatGroupMetadataParticipants]
        """

        self._participants = participants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseChatGroupMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseChatGroupMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
